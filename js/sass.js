// Generated by CoffeeScript 1.4.0
(function() {
  var SaSS;

  SaSS = (function() {

    function SaSS(o) {
      o = o || {};
      this.newline = o.newline || "\n";
      this.coffeeStyle = '';
      this._comment = false;
      this.convert = function(s) {
        var self;
        this.lines = s.split(/[\n|\r|\r\n]+/);
        self = this;
        this.lines.forEach(function(v, k, a) {
          if (!v.trim()) {
            return;
          }
          return self.coffeeStyle += self._convert(v.replace(/\s+$/, ''));
        });
        return this.coffeeStyle.replace(/[\n|\r|\r\n]$/, '');
      };
      this._convert = function(s) {
        if (this._isImport(s)) {
          return s.replace(/\@import\s+/, '#=require ../') + (".css.coffee" + this.newline);
        }
        if (this._isComment(s)) {
          return s.replace(/\/+\**/, '#').replace(/\*/, '#') + this.newline;
        }
        if (this._isSelector(s)) {
          return this._selector(s);
        } else {
          return this._property(s);
        }
      };
      this._isSelector = function(s) {
        return s.search(/\:\s+[\w\"\'\#\d]+/) === -1 && s.search(/\+/) === -1;
      };
      this._isImport = function(s) {
        return s.search(/^@/) > -1;
      };
      this._isComment = function(s) {
        if (s.search(/^\s*\/+\**/) > -1) {
          this._comment = true;
        } else if (s.search(/^\s*\*/) > -1 && this._comment) {
          this._comment = true;
        } else {
          this._comment = false;
        }
        return this._comment;
      };
      this._selector = function(s) {
        return s.replace(/(\s*)(.*)$/, "$1s '$2', ->" + this.newline);
      };
      this._property = function(s) {
        var c;
        if (s.search(/\+/) > -1) {
          c = s.split('(');
          return "" + (c[0].replace(/\+/, '').replace(/\-/g, '_')) + " " + (c[1].replace(/\"/g, '\'').replace(/\(/, ' ').replace(/\$/, '').replace(/\)/, '')) + this.newline;
        } else {
          c = s.split(':');
          return "" + (c[0].replace(/\-/, '_')) + " '" + (c[1].replace(/^\s*/, '').replace(/\'/g, '\"')) + "'" + this.newline;
        }
      };
    }

    return SaSS;

  })();

  exports.getSaSS = function(o) {
    return new SaSS(o);
  };

}).call(this);
